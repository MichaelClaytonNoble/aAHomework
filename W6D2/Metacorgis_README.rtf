{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fnil\fcharset0 Georgia;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 Georgia-Bold;\f4\fnil\fcharset0 Monaco;\f5\fnil\fcharset0 Menlo-Regular;
\f6\fswiss\fcharset0 Helvetica-Light;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red10\green92\blue255;
\red246\green246\blue239;\red34\green34\blue34;\red224\green213\blue97;\red157\green101\blue255;\red88\green209\blue235;
\red152\green224\blue36;\red100\green108\blue125;\red250\green132\blue25;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c0\c7451;\cssrgb\c0\c46667\c100000;
\cssrgb\c97255\c97255\c94902;\cssrgb\c17647\c17647\c17647;\cssrgb\c90196\c85882\c45490;\cssrgb\c68235\c50588\c100000;\cssrgb\c40000\c85098\c93725;
\cssrgb\c65098\c88627\c18039;\cssrgb\c46667\c50196\c56471;\cssrgb\c99216\c59216\c12157;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\li690\ri690\sl860\sa400\partightenfactor0

\f0\b\fs72 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Metaprogramming MetaCorgis\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Today we'll use metaprogramming to refactor an unwieldy\'a0
\f2 \cb3 CorgiSnacks
\f1 \cb1 \'a0class.\
\pard\pardeftab720\li690\ri690\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 Phase 0: Tour the Code!\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f3\fs40 \cf2 Download and scan over the\'a0{\field{\*\fldinst{HYPERLINK "https://assets.aaonline.io/fullstack/sql/homeworks/meta_corgis/skeleton.zip?raw=true"}}{\fldrslt 
\f1\b0 \cf4 \strokec4 skeleton}}\'a0briefly before continuing below.
\f1\b0 \
\pard\pardeftab720\li690\ri690\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 SnackBox Class\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 The\'a0
\f2 \cb3 SnackBox
\f1 \cb1 \'a0class represents our database.\
The database has three boxes of corgi snacks, stored in the\'a0
\f2 \cb3 SNACK_BOX_DATA
\f1 \cb1 \'a0constant. Each box has three corgi snacks - a bone, kibble, and a treat.\
It also has methods defined to tell us the info and tastiness rating of a given snack in whichever box we specify - e.g.\'a0
\f2 \cb3 get_\{snack\}_info
\f1 \cb1 \'a0and\'a0
\f2 \cb3 get_\{snack\}_tastiness
\f1 \cb1 . So if we wanted to know the tastiness level of the bone in box two, we would simply call\'a0
\f2 \cb3 get_bone_tastiness(2)
\f1 \cb1 \'a0on an instance of\'a0
\f2 \cb3 SnackBox
\f1 \cb1 .\
\pard\pardeftab720\li690\ri690\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 CorgiSnacks Class\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 The\'a0
\f2 \cb3 CorgiSnacks
\f1 \cb1 \'a0class serves as an interface with our database.\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f2 \cf2 \cb3 CorgiSnacks
\f1 \cb1 \'a0must contain a reference to the database (an instance of\'a0
\f2 \cb3 SnackBox
\f1 \cb1 ) and its\'a0
\f2 \cb3 box_id
\f1 \cb1 \'a0within the database. We should be able to call\'a0
\f2 \cb3 bone
\f1 \cb1 ,\'a0
\f2 \cb3 kibble
\f1 \cb1 , or\'a0
\f2 \cb3 treat
\f1 \cb1 \'a0on any instance of\'a0
\f2 \cb3 CorgiSnacks
\f1 \cb1 \'a0and get back a statement of the info and tastiness level of that snack.\
\pard\pardeftab720\li690\ri690\sl560\sa400\partightenfactor0

\f0\b\fs48 \cf2 Test Drive\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Do a quick test of the code to get more familiar with how it all fits together.\
Check out the\'a0
\f2 \cb3 SnackBox
\f1 \cb1 's instance methods to get snack info and tastiness levels:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf5 \cb6 \strokec5 pry
\f5 (
\f4 main
\f5 )>
\f4  load 
\f5 \cf7 \strokec7 'meta_corgis.rb'
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  snack_box 
\f5 =
\f4  
\f5 \cf8 \strokec8 SnackBox\cf5 \strokec5 .\cf9 \strokec9 new
\f4 \cf5 \strokec5 \
\pard\pardeftab720\sl480\partightenfactor0

\f5 \cf10 \strokec10 pry\cf5 \strokec5 (
\f4 main
\f5 )>
\f4  snack_box
\f5 .
\f4 get_bone_info
\f5 (\cf8 \strokec8 1\cf5 \strokec5 )
\f4  
\f5 \cf11 \strokec11 # => "Phoenician rawhide"
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  snack_box
\f5 .
\f4 get_kibble_tastiness
\f5 (\cf8 \strokec8 3\cf5 \strokec5 )
\f4  
\f5 \cf11 \strokec11 # => 45
\f4 \cf5 \strokec5 \
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb1 \strokec2 Then test out the\'a0
\f2 \cb3 CorgiSnacks
\f1 \cb1 \'a0class:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf5 \cb6 \strokec5 pry
\f5 (
\f4 main
\f5 )>
\f4  snacks 
\f5 =
\f4  
\f5 \cf8 \strokec8 CorgiSnacks\cf5 \strokec5 .\cf9 \strokec9 new\cf5 \strokec5 (
\f4 snack_box
\f5 ,
\f4  
\f5 \cf8 \strokec8 1\cf5 \strokec5 )
\f4 \
pry
\f5 (
\f4 main
\f5 )>
\f4  snacks
\f5 .
\f4 bone 
\f5 \cf11 \strokec11 # => "Bone: Phoenician rawhide: 20"
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  snacks
\f5 .
\f4 kibble 
\f5 \cf11 \strokec11 # => "* Kibble: Delicately braised hamhocks: 33"
\f4 \cf5 \strokec5 \
\pard\pardeftab720\li690\ri690\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb1 \strokec2 Phase 1: Refactor with\'a0
\f2\b0 \cb3 #method_missing
\f0\b \cb1 \
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 When we call any snack instance method on a snack_box, we get back a very similar result:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 a star if the tastiness level has gone above 30,\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 the snack type,\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 the snack description,\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 and the tastiness level.\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0
\cf2 It is repetitive and not modular to have all three methods defined on the\'a0
\f2 \cb3 CorgiSnacks
\f1 \cb1 \'a0class when they follow the same pattern.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Using a\'a0
\f2 \cb3 method_missing
\f1 \cb1 \'a0instance method, re-factor\'a0
\f2 \cb3 CorgiSnacks
\f1 \cb1 \'a0into the new\'a0
\f2 \cb3 MetaCorgiSnacks
\f1 \cb1 \'a0class to DRY things up!\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hint: Within\'a0
\f2 \cb3 #method_missing
\f1 \cb1 \'a0use\'a0
\f2 \cb3 #send
\f1 \cb1 \'a0to call methods on your\'a0
\f2 \cb3 @snack_box
\f1 \cb1 . You can interpolate to get the method name, and then pass the method name to\'a0
\f2 \cb3 #send
\f1 \cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Review the\'a0{\field{\*\fldinst{HYPERLINK "https://open.appacademy.io/learn/swe-in-person/sql/metaprogramming"}}{\fldrslt \cf4 \strokec4 metaprogramming}}\'a0reading if you need a reminder on how to use\'a0
\f2 \cb3 #send
\f1 \cb1 .\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0
\cf2 If you've got it working correctly, its behavior should be the same as before, just a lot DRY-er!\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf5 \cb6 \strokec5 pry
\f5 (
\f4 main
\f5 )>
\f4  load 
\f5 \cf7 \strokec7 'meta_corgis.rb'
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  snack_box 
\f5 =
\f4  
\f5 \cf8 \strokec8 SnackBox\cf5 \strokec5 .\cf9 \strokec9 new
\f4 \cf5 \strokec5 \
\pard\pardeftab720\sl480\partightenfactor0

\f5 \cf10 \strokec10 pry\cf5 \strokec5 (
\f4 main
\f5 )>
\f4  meta_snacks 
\f5 =
\f4  
\f5 \cf8 \strokec8 MetaCorgiSnacks\cf5 \strokec5 .\cf9 \strokec9 new\cf5 \strokec5 (
\f4 snack_box
\f5 ,
\f4  
\f5 \cf8 \strokec8 1\cf5 \strokec5 )
\f4 \
pry
\f5 (
\f4 main
\f5 )>
\f4  meta_snacks
\f5 .
\f4 bone 
\f5 \cf11 \strokec11 # => "Bone: Phoenician rawhide: 20 "
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  meta_snacks
\f5 .
\f4 kibble 
\f5 \cf11 \strokec11 # => "* Kibble: Delicately braised hamhocks: 33"
\f4 \cf5 \strokec5 \
\pard\pardeftab720\li690\ri690\sl720\sa400\partightenfactor0

\f0\b\fs60 \cf2 \cb1 \strokec2 Phase 2: Refactor with Dynamic Dispatch\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f1\b0\fs40 \cf2 Let's refactor the class to use dynamic dispatch instead of\'a0
\f2 \cb3 method_missing
\f1 \cb1 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls3\ilvl0
\f3\b \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Comment out
\f1\b0 \'a0the\'a0
\f2 \cb3 MetaCorgiSnacks#method_missing
\f1 \cb1 \'a0instance method from the previous phase.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Write a new\'a0
\f3\b class
\f1\b0 \'a0method called\'a0
\f2 \cb3 ::define_snack
\f1 \cb1 \'a0that uses\'a0
\f2 \cb3 ::define_method
\f1 \cb1 \'a0to dynamically build each of the snack methods (
\f2 \cb3 bone
\f1 \cb1 ,\'a0
\f2 \cb3 kibble
\f1 \cb1 , and\'a0
\f2 \cb3 treat
\f1 \cb1 ) on the\'a0
\f2 \cb3 CorgiSnacks
\f1 \cb1 \'a0class.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Once again, you'll want to use\'a0
\f2 \cb3 #send
\f1 \cb1 \'a0to call the right methods on the\'a0
\f2 \cb3 @snack_box
\f1 \cb1 . This will look basically like Phase 1.\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0
\cf2 Your class should function like this now:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf5 \cb6 \strokec5 pry
\f5 (
\f4 main
\f5 )>
\f4  load 
\f5 \cf7 \strokec7 'meta_corgis.rb'
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  
\f5 \cf8 \strokec8 MetaCorgiSnacks\cf5 \strokec5 .
\f4 define_snack
\f5 (\cf7 \strokec7 "bone"\cf5 \strokec5 )
\f4 \
pry
\f5 (
\f4 main
\f5 )>
\f4  snack_box 
\f5 =
\f4  
\f5 \cf8 \strokec8 SnackBox\cf5 \strokec5 .\cf9 \strokec9 new
\f4 \cf5 \strokec5 \
\pard\pardeftab720\sl480\partightenfactor0

\f5 \cf10 \strokec10 pry\cf5 \strokec5 (
\f4 main
\f5 )>
\f4  meta_snacks 
\f5 =
\f4  
\f5 \cf8 \strokec8 MetaCorgiSnacks\cf5 \strokec5 .\cf9 \strokec9 new\cf5 \strokec5 (
\f4 snack_box
\f5 ,
\f4  
\f5 \cf8 \strokec8 1\cf5 \strokec5 )
\f4 \
pry
\f5 (
\f4 main
\f5 )>
\f4  meta_snacks
\f5 .
\f4 bone 
\f5 \cf11 \strokec11 # => "Bone: Phoenician rawhide: 20 "
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  meta_snacks
\f5 .
\f4 kibble 
\f5 \cf11 \strokec11 # => "NoMethodError: undefined method `kibble'...""
\f4 \cf5 \strokec5 \
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb1 \strokec2 Almost there! Now we just need to automatically call\'a0
\f2 \cb3 CorgiSnacks::define_snack
\f1 \cb1 \'a0for each snack upon initialization.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl680\sa100\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 How do we know what the different snacks are?\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 One way to tell is to call\'a0
\f2 \cb3 #methods
\f1 \cb1 \'a0on our\'a0
\f2 \cb3 @snack_box
\f1 \cb1 .\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This will give us back an array of all the methods defined on that object.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Then we can match the ones we care about using\'a0{\field{\*\fldinst{HYPERLINK "http://ruby-doc.org/core-2.3.1/Enumerable.html#method-i-grep"}}{\fldrslt \cf4 \strokec4 grep}}.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl680\sa100\partightenfactor0
\ls4\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If we pass\'a0
\f2 \cb3 grep
\f1 \cb1 \'a0the argument\'a0
\f2 \cb3 /^get_(.*)_info$/
\f1 \cb1 , it will match any methods that are some variation of\'a0
\f2 \cb3 get_\{snack\}_info
\f1 \cb1 \'a0and "capture" the snack name - the\'a0
\f2 \cb3 (.*)
\f1 \cb1 \'a0tells it to capture any number of characters that come between\'a0
\f2 \cb3 get_
\f1 \cb1 \'a0and\'a0
\f2 \cb3 _info
\f1 \cb1 .\
\ls4\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We can then use\'a0
\f2 \cb3 $1
\f1 \cb1 \'a0to get back the matching snack name that was captured.\
\ls4\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 So we can pass the block\'a0
\f2 \cb3 \{ MetaCorgiSnacks.define_snack $1 \}
\f1 \cb1 \'a0to our\'a0
\f2 \cb3 grep
\f1 \cb1 \'a0call, and it will call\'a0
\f2 \cb3 ::define_snack
\f1 \cb1 \'a0with each snack name.\
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0
\cf2 You should call something like this in the\'a0
\f2 \cb3 initialize
\f1 \cb1 \'a0method:\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf5 \cb6 \strokec5 snack_box
\f5 .
\f4 methods
\f5 .
\f4 grep
\f5 (\cf12 \strokec12 /^get_(.*)_info$/\cf5 \strokec5 )
\f4  
\f5 \{
\f4  
\f5 \cf8 \strokec8 MetaCorgiSnacks\cf5 \strokec5 .
\f4 define_snack $
\f5 \cf8 \strokec8 1
\f4 \cf5 \strokec5  
\f5 \}
\f4 \
\pard\pardeftab720\li690\ri690\sl600\sa400\partightenfactor0

\f1\fs40 \cf2 \cb1 \strokec2 This should work as before again, without having to call\'a0
\f2 \cb3 MetaCorgiSnacks.define_snack("bone")
\f1 \cb1 \'a0first!\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs32 \cf5 \cb6 \strokec5 pry
\f5 (
\f4 main
\f5 )>
\f4  load 
\f5 \cf7 \strokec7 'meta_corgis.rb'
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  snack_box 
\f5 =
\f4  
\f5 \cf8 \strokec8 SnackBox\cf5 \strokec5 .\cf9 \strokec9 new
\f4 \cf5 \strokec5 \
\pard\pardeftab720\sl480\partightenfactor0

\f5 \cf10 \strokec10 pry\cf5 \strokec5 (
\f4 main
\f5 )>
\f4  meta_snacks 
\f5 =
\f4  
\f5 \cf8 \strokec8 MetaCorgiSnacks\cf5 \strokec5 .\cf9 \strokec9 new\cf5 \strokec5 (
\f4 snack_box
\f5 ,
\f4  
\f5 \cf8 \strokec8 1\cf5 \strokec5 )
\f4 \
pry
\f5 (
\f4 main
\f5 )>
\f4  meta_snacks
\f5 .
\f4 bone 
\f5 \cf11 \strokec11 # => "Bone: Phoenician rawhide: 20 "
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  meta_snacks
\f5 .
\f4 kibble 
\f5 \cf11 \strokec11 # => "* Kibble: Delicately braised hamhocks: 33 "
\f4 \cf5 \strokec5 \
pry
\f5 (
\f4 main
\f5 )>
\f4  meta_snacks
\f5 .
\f4 treat 
\f5 \cf11 \strokec11 # => "Treat: Chewy dental sticks: 40 "
\f4 \cf5 \strokec5 \
\pard\pardeftab720\partightenfactor0

\f6\fs30\fsmilli15313 \cf2 \cb1 \strokec2 \
}